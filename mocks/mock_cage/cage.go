// Code generated by MockGen. DO NOT EDIT.
// Source: cage.go

// Package mock_cage is a generated GoMock package.
package mock_cage

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	cage "github.com/loilo-inc/canarycage"
)

// MockCage is a mock of Cage interface.
type MockCage struct {
	ctrl     *gomock.Controller
	recorder *MockCageMockRecorder
}

// MockCageMockRecorder is the mock recorder for MockCage.
type MockCageMockRecorder struct {
	mock *MockCage
}

// NewMockCage creates a new mock instance.
func NewMockCage(ctrl *gomock.Controller) *MockCage {
	mock := &MockCage{ctrl: ctrl}
	mock.recorder = &MockCageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCage) EXPECT() *MockCageMockRecorder {
	return m.recorder
}

// Recreate mocks base method.
func (m *MockCage) Recreate(ctx context.Context) (*cage.RecreateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recreate", ctx)
	ret0, _ := ret[0].(*cage.RecreateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recreate indicates an expected call of Recreate.
func (mr *MockCageMockRecorder) Recreate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recreate", reflect.TypeOf((*MockCage)(nil).Recreate), ctx)
}

// RollOut mocks base method.
func (m *MockCage) RollOut(ctx context.Context) (*cage.RollOutResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollOut", ctx)
	ret0, _ := ret[0].(*cage.RollOutResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollOut indicates an expected call of RollOut.
func (mr *MockCageMockRecorder) RollOut(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollOut", reflect.TypeOf((*MockCage)(nil).RollOut), ctx)
}

// Run mocks base method.
func (m *MockCage) Run(ctx context.Context, input *cage.RunInput) (*cage.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, input)
	ret0, _ := ret[0].(*cage.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockCageMockRecorder) Run(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCage)(nil).Run), ctx, input)
}

// Up mocks base method.
func (m *MockCage) Up(ctx context.Context) (*cage.UpResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Up", ctx)
	ret0, _ := ret[0].(*cage.UpResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Up indicates an expected call of Up.
func (mr *MockCageMockRecorder) Up(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*MockCage)(nil).Up), ctx)
}

// MockTime is a mock of Time interface.
type MockTime struct {
	ctrl     *gomock.Controller
	recorder *MockTimeMockRecorder
}

// MockTimeMockRecorder is the mock recorder for MockTime.
type MockTimeMockRecorder struct {
	mock *MockTime
}

// NewMockTime creates a new mock instance.
func NewMockTime(ctrl *gomock.Controller) *MockTime {
	mock := &MockTime{ctrl: ctrl}
	mock.recorder = &MockTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTime) EXPECT() *MockTimeMockRecorder {
	return m.recorder
}

// NewTimer mocks base method.
func (m *MockTime) NewTimer(arg0 time.Duration) *time.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTimer", arg0)
	ret0, _ := ret[0].(*time.Timer)
	return ret0
}

// NewTimer indicates an expected call of NewTimer.
func (mr *MockTimeMockRecorder) NewTimer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTimer", reflect.TypeOf((*MockTime)(nil).NewTimer), arg0)
}

// Now mocks base method.
func (m *MockTime) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTime)(nil).Now))
}
