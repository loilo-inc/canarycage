// Code generated by MockGen. DO NOT EDIT.
// Source: ./task/factory.go

// Package mock_task is a generated GoMock package.
package mock_task

import (
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	gomock "github.com/golang/mock/gomock"
	task "github.com/loilo-inc/canarycage/task"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// NewAlbTask mocks base method.
func (m *MockFactory) NewAlbTask(input *task.Input, lb *types.LoadBalancer) task.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAlbTask", input, lb)
	ret0, _ := ret[0].(task.Task)
	return ret0
}

// NewAlbTask indicates an expected call of NewAlbTask.
func (mr *MockFactoryMockRecorder) NewAlbTask(input, lb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAlbTask", reflect.TypeOf((*MockFactory)(nil).NewAlbTask), input, lb)
}

// NewSimpleTask mocks base method.
func (m *MockFactory) NewSimpleTask(input *task.Input) task.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSimpleTask", input)
	ret0, _ := ret[0].(task.Task)
	return ret0
}

// NewSimpleTask indicates an expected call of NewSimpleTask.
func (mr *MockFactoryMockRecorder) NewSimpleTask(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSimpleTask", reflect.TypeOf((*MockFactory)(nil).NewSimpleTask), input)
}
