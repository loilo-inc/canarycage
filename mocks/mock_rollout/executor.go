// Code generated by MockGen. DO NOT EDIT.
// Source: ./rollout/executor.go

// Package mock_rollout is a generated GoMock package.
package mock_rollout

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/loilo-inc/canarycage/types"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// RollOut mocks base method.
func (m *MockExecutor) RollOut(ctx context.Context, input *types.RollOutInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollOut", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollOut indicates an expected call of RollOut.
func (mr *MockExecutorMockRecorder) RollOut(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollOut", reflect.TypeOf((*MockExecutor)(nil).RollOut), ctx, input)
}

// ServiceUpdated mocks base method.
func (m *MockExecutor) ServiceUpdated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceUpdated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ServiceUpdated indicates an expected call of ServiceUpdated.
func (mr *MockExecutorMockRecorder) ServiceUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUpdated", reflect.TypeOf((*MockExecutor)(nil).ServiceUpdated))
}
